import java.util.Random;

public class Ile {

	private Parcelle[][] grille;
	private int[][] jeu;
	private SuperPlateau p;
	private int ligne = 10;
	private int colonne = 10;
	private double tauxRocher = 0.1;
	
	public Ile() { // ile vide sans navires
		this.grille = new Parcelle[ligne][colonne];		
		this.tauxRocher = 0;
		this.viderIle();
	}
			
	public Ile(int lig, int col) { // ile vide avec navires
		this.ligne = lig;
		this.colonne = col;	
		this.grille = new Parcelle[ligne][colonne];
		this.viderIle();
		this.setNavire();
		this.setRochers();
	}
	
	public Ile(Parcelle[][] tablo) {
		this.ligne = tablo.length;
		this.colonne = tablo[0].length;
		this.grille = tablo;
		this.jeu = new int[grille.length][grille[0].length];
		this.viderIle();
		this.setNavire();
		this.setRochers();
		
	}
	
	public Ile(Parcelle[][] tablo, int pourcent) {
		this.ligne = tablo.length;
		this.colonne = tablo[0].length;
		this.grille = tablo;
		this.jeu = new int[grille.length][grille[0].length];
		this.viderIle();
		this.setNavire();
		this.tauxRocher = pourcent * 0.01;
		this.setRochers();
	}
	
	private void setNavire() {
		grille[(grille.length-1)/2][0].setElement("navire1");
		grille[(grille.length-1)/2][grille.length-1].setElement("navire2");
	}
	private void setRochers(){	
		int nbroc=0;
		while (nbroc < getNbRocher()) {
			
			Random alea = new Random();
			int i = alea.nextInt(ligne-1);
			int j = alea.nextInt(colonne-1);
			
			if (nbroc < getNbRocher() && grille[i][j].estVide()){
				grille[i][j].setElement("rocher");
				nbroc++;
				
				if (Parcelle.poseClef == false) {
					grille[i][j].clef = true;
					Parcelle.poseClef = true;
				}
				
				if (Parcelle.poseCoffre == false && grille[i][j].clef == false) {
					grille[i][j].coffre = true;
					Parcelle.poseCoffre = true;
				}
				
			}
		
		}
		
	}
	public int getNbRocher(){
		return (int)(ligne*colonne*tauxRocher);
	}
	public int getLigne() {
		return ligne;
	}	

	public int getColonne() {
		return colonne;
	}	

	public Parcelle[][] getGrille() {
		return grille;
	}

	public void setGrille(Parcelle[][] tablo) {
		if (ligne==tablo.length && colonne==tablo[0].length) {
			this.grille = tablo;
		} else {
			System.out.println("Erreur: taille invalide");
		}
	}
	private boolean genererRocher(){
		Random ran = new Random();
		int rand = ran.nextInt(ligne*colonne);
		if(rand <= 10){
			return true;
		}else{
			return false;
		}
	}
	
	private void setClef() {
		while (Parcelle.poseClef == false) {
			Random ran = new Random();
			int lig = ran.nextInt(this.ligne-1);
			int col = ran.nextInt(this.colonne-1);
			if (grille[lig][col].equals("rocher")) {
				grille[lig][col].clef = true;
				Parcelle.poseClef = true;
			}
		}
	}
	
	
	public void viderIle() { 
		for (int i=0; i<ligne; i++) {
			for (int j=0; j<colonne; j++) {
				this.grille[i][j] = new Parcelle();
				//jeu[i][j] = 0; //graphique
			}
		}
	}
	
	public String toString() {
		
		String retour = "";
		for (int lig=1; lig<=ligne*2+1; lig++) {
			for (int col=1; col<=colonne*4+1; col++) {
				
				if (lig%2 == 1) {
					if (col%4 == 1) {
						retour+="+";
					} else {			
						retour+="-";						
					}
				} else if (col%4 == 1) {
					retour+="|";
				} else if (col%4 == 3) {					
					if (grille[lig/2-1][col/4].clef == true) {
						retour += "K"; 
					} else if (grille[lig/2-1][col/4].coffre == true){
						retour += "C";
					} else {
						retour+=grille[lig/2-1][col/4].toString();
					}
				} else {					
					retour+=" ";
				}
			}
			retour+="\n";			
		}
		return retour;		
	}
	
}
